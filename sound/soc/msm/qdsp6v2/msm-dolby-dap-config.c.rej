--- sound/soc/msm/qdsp6v2/msm-dolby-dap-config.c	2017-03-12 21:44:10.000000000 -0500
+++ sound/soc/msm/qdsp6v2/msm-dolby-dap-config.c	2017-05-08 21:35:00.000000000 -0500
@@ -1,4 +1,6 @@
-/* Copyright (c) 2013-2014, The Linux Foundation. All rights reserved.
+/*
+* Copyright (c) 2013-2014, 2016-2017, The Linux Foundation. All rights reserved.
+*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
@@ -816,7 +835,11 @@
 			 __func__, copp_idx);
 		return -EINVAL;
 	}
-	params_value = kzalloc(params_length, GFP_KERNEL);
+	if (dolby_dap_params_get.length > 128 - DOLBY_PARAM_PAYLOAD_SIZE) {
+		pr_err("%s: Incorrect parameter length", __func__);
+		return -EINVAL;
+	}
+	params_value = kzalloc(params_length + param_payload_len, GFP_KERNEL);
 	if (!params_value) {
 		pr_err("%s, params memory alloc failed\n", __func__);
 		return -ENOMEM;
@@ -835,8 +858,7 @@
 			pr_err("%s: invalid param id to set", __func__);
 			rc = -EINVAL;
 		} else {
-			params_length = (dolby_dap_params_length[i] +
-						DOLBY_PARAM_PAYLOAD_SIZE) *
+			params_length = dolby_dap_params_length[i] *
 						sizeof(uint32_t);
 			rc = adm_get_params(port_id, copp_idx,
 					    DOLBY_BUNDLE_MODULE_ID,
@@ -913,6 +935,11 @@
 	uint32_t param_payload_len =
 		DOLBY_PARAM_PAYLOAD_SIZE * sizeof(uint32_t);
 	int port_id, copp_idx, idx;
+	if (length > DOLBY_PARAM_VCNB_MAX_LENGTH || length <= 0) {
+		pr_err("%s Incorrect VCNB length", __func__);
+		ucontrol->value.integer.value[0] = 0;
+		return -EINVAL;
+	}
 	for (idx = 0; idx < AFE_MAX_PORTS; idx++) {
 		port_id = dolby_dap_params_states.port_id[idx];
 		copp_idx = dolby_dap_params_states.copp_idx[idx];
